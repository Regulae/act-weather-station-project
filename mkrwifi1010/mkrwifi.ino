#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Bernhards_MKR_WIFI_1010"
  https://create.arduino.cc/cloud/things/b2504fe2-192c-4f2b-82aa-dff8184c089d

  The following variables are automatically generated and updated when changes are made to the Thing properties

  float temperature;
  float pressure;
  float humidity;
  float light_intensity;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include <Arduino_MKRENV.h>
#include "thingProperties.h"

float _temperature = 0;
float _humidity = 0;
float _pressure = 0;
float _lux= 0;

const int ALTITUDE = 408; // altitude in meters = Zürich
const byte address[6] = "00001";
char thChar[32] = "";
String thString = "";

unsigned long lastConnectionTime = 0;              // last time you connected to the server, in milliseconds
const unsigned long postingInterval = 2000;       // delay between updates, in milliseconds

int debug = 0;
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  
  Serial.print("Test: ");
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV shield!");
    while (1);
  }
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  // if 2 seconds have passed since your last connection,
  // then connect again and send data:
  if (millis() - lastConnectionTime > postingInterval)
  {
    readSensors();

    temperature = _temperature;
    humidity = _humidity;
    pressure = _pressure*10 + (ALTITUDE/8); // convert to hPa and add 1hPa for 8 meters altitude
    light_intensity = _lux;
    uvIndex = _uvIndex;

    lastConnectionTime = millis();

    /*
      NOTE: We put "ArduinoCloud.update()" inside the "if condition" only to make sure that the values shown in the TFT
      are the same as those shown in the cloud in the same time interval. But this function by itself is responsible for
      sending every 2 seconds the value of the variables to the cloud.
    */
    ArduinoCloud.update();





  }


}

//Read sensors value: Temperature, Humidity, Pressure, Lux
void readSensors()
{
  /*
  All the values are returned as floats and have the following ranges, expressed in the SI units:

Absolute pressure range: 260 to 1260 hPa
Humidity range: 0 - 100%; accuracy: ± 3.5% rH, 20 to +80% rH
Temperature range -40 +120; accuracy: ± 0.5 °C, 15 to +40 °C
Lux range of the sensor with analog reading from 10 to 100.000 lux
UVA/UVB resolution: 16bit; unit μW/cm2
UVIndex: from 1 to 11+ as explained (https://www.who.int/uv/intersunprogramme/activities/uv_index/en/index1.html)
readTemperature()
readHumidity()
readPressure()
readIlluminance()
readUVA()
readUVB()
readUVIndex()
  */
  _temperature = ENV.readTemperature();
  _humidity = ENV.readHumidity();
  _pressure = ENV.readPressure();
  _lux = ENV.readIlluminance(LUX);
}





































